# あなたは、とあるウェブサイトを管理していました。
# ある連続したk日間、このウェブサイトでキャンペーンを行ったのですが、いつからいつまでの期間に行ったかを忘れてしまいました。
# 幸い、ウェブサイトを運営していた全n日分のアクセスログが残っており、1日ごとの訪問者数が分かっています。
# とりあえず、連続するk日の中で、1日あたりの平均訪問者数が最も多い期間を、キャンペーンを行った期間の候補だと考えることにしました。
# n日分の訪問者数のリストとキャンペーンの日数kが入力されるので、キャンペーンを行った期間の候補数と、候補の中で最も早い開始日を出力してください。


# 入力される値
# 入力は2行から成ります。
# 1行目にはnとkが半角スペース区切りで入力されます。
# 2行目にはn個の整数a_1, a_2, …, a_nが半角スペース区切りで入力されます。a_iはi日目の訪問者数を表します。

# 入力値最終行の末尾に改行が１つ入ります。
# 文字列は標準入力から渡されます。


# 期待する出力
# キャンペーンを行った期間の候補数と、候補の中で最も早い開始日を、この順で半角スペース区切りで1行で出力してください。


# 条件
# すべてのテストケースにおいて、以下の条件をみたします。

# ・1≦n≦1,000
# ・1≦k≦n
# ・0≦a_i≦100


# 入力例1
# 5 3
# 1 2 3 2 1

# 出力例1
# 1 2

# 入力例2
# 10 2
# 6 2 0 7 1 3 5 3 2 6

# 出力例2
# 5 1


n, k = gets.chomp.split.map(&:to_f)

log = gets.chomp.split.map(&:to_i)

max_average = 0
count = 0
start_date = 0
i = 0
while true
  k_log = log.slice(i, k)

  break if k_log.length != k

  k_sum = k_log.sum

  if max_average < (k_sum / k)
    max_average = (k_sum / k)
    count = 1
    start_date = i + 1
  elsif max_average == (k_sum / k)
    count += 1
  end

  i += 1
end

puts "#{count} #{start_date}"